<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure on ManualBashing</title><link>https://manualbashing.github.io/tags/azure/</link><description>Recent content in Azure on ManualBashing</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 17 Nov 2023 13:37:45 +0000</lastBuildDate><atom:link href="https://manualbashing.github.io/tags/azure/index.xml" rel="self" type="application/rss+xml"/><item><title>Keep your secrets out of your bicep parameters</title><link>https://manualbashing.github.io/posts/keep-your-secrets-out-of-your-bicep-parameters/</link><pubDate>Fri, 17 Nov 2023 13:37:45 +0000</pubDate><guid>https://manualbashing.github.io/posts/keep-your-secrets-out-of-your-bicep-parameters/</guid><description>&lt;p>Imagine the following scenario: We have to deploy an Azure Key Vault that comes already populated with a secret, let&amp;rsquo;s say, some third party&amp;rsquo;s API access key. Our bicep file (&lt;code>azuredeploy.bicep&lt;/code>) could look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>param location string &lt;span style="color:#666">=&lt;/span> resourceGroup()&lt;span style="color:#666">.&lt;/span>location
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>param tenantId string &lt;span style="color:#666">=&lt;/span> tenant()&lt;span style="color:#666">.&lt;/span>tenantId
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a2f">@secure&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>param keyvaultSecretCatfunValue string
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var name &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#b44">&amp;#39;kv-${uniqueString(resourceGroup().id)}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>resource keyVault &lt;span style="color:#b44">&amp;#39;Microsoft.KeyVault/vaults@2019-09-01&amp;#39;&lt;/span> &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> location: location
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> properties: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tenantId: tenantId
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sku: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#b44">&amp;#39;standard&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> family: &lt;span style="color:#b44">&amp;#39;A&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> accessPolicies: []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>resource keyvaultSecretCatfun &lt;span style="color:#b44">&amp;#39;Microsoft.KeyVault/vaults/secrets@2019-09-01&amp;#39;&lt;/span> &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parent: keyVault
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#b44">&amp;#39;Catfun&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> properties: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value: keyvaultSecretCatfunValue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But how to we deploy this to Azure without entering the secret&amp;rsquo;s value every time we call &lt;code>az deployment&lt;/code>?&lt;/p>
&lt;h2 id="loading-individual-secrets-from-external-files">Loading individual secrets from external files&lt;/h2>
&lt;p>One trick that worked well for me so far, was to use an external text file, that would be excluded from version control.&lt;/p>
&lt;p>For this to work would create a file &lt;code>Catfun.secret&lt;/code> that contains the API secret and make sure, that it is excluded from version control via &lt;code>.gitignore&lt;/code>.&lt;/p>
&lt;p>This secret would then be loaded by the bicep template as the default value for the &lt;code>keyvaultSecretCatfunValue&lt;/code> parameter:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a2f">@secure&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">#disable-next-line secure-parameter-default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>param keyvaultSecretCatfunValue string &lt;span style="color:#666">=&lt;/span> loadTextContent(&lt;span style="color:#b44">&amp;#39;Catfun.secret&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(We have to add &lt;code>#disable-next-line secure-parameter-default&lt;/code>) to ignore the warning, that secure parameters should not use default values. Our scenario is a reasonable exception to this rule.)&lt;/p>
&lt;p>&lt;img src="https://manualbashing.github.io/static/vscode-secrets-file.png" alt="Screenshot of vscode showing a gitignore file and the code from the code listing above">&lt;/p>
&lt;h2 id="loading-several-secrets-from-the-same-file">Loading several secrets from the same file&lt;/h2>
&lt;p>If you need to deploy several secrets in a secure way it is not necessary to create a secret file for each. Instead you can save your secrets in a json file, that can be parsed by bicep.&lt;/p>
&lt;p>The content of my &lt;code>MoreSecrets.json&lt;/code> file looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;#34;Catfun&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;MySuperSecretAPIKey!&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;#34;Fishfun&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;TheSameButBetter##!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The file can then be parsed using the &lt;code>loadJsonContent()&lt;/code> function in bicep:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>param location string &lt;span style="color:#666">=&lt;/span> resourceGroup()&lt;span style="color:#666">.&lt;/span>location
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>param tenantId string &lt;span style="color:#666">=&lt;/span> tenant()&lt;span style="color:#666">.&lt;/span>tenantId
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a2f">@secure&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">#disable-next-line secure-parameter-default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>param secrets &lt;span style="color:#a2f">object&lt;/span> &lt;span style="color:#666">=&lt;/span> loadJsonContent(&lt;span style="color:#b44">&amp;#39;MoreFun.secret&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var name &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#b44">&amp;#39;kv-${uniqueString(resourceGroup().id)}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>resource keyVault &lt;span style="color:#b44">&amp;#39;Microsoft.KeyVault/vaults@2019-09-01&amp;#39;&lt;/span> &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> location: location
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> properties: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tenantId: tenantId
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sku: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#b44">&amp;#39;standard&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> family: &lt;span style="color:#b44">&amp;#39;A&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> accessPolicies: []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>resource keyvaultSecretCatfun &lt;span style="color:#b44">&amp;#39;Microsoft.KeyVault/vaults/secrets@2019-09-01&amp;#39;&lt;/span> &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parent: keyVault
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#b44">&amp;#39;Catfun&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> properties: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value: secrets&lt;span style="color:#666">.&lt;/span>Catfun
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>resource keyvaultSecretFishfun &lt;span style="color:#b44">&amp;#39;Microsoft.KeyVault/vaults/secrets@2019-09-01&amp;#39;&lt;/span> &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parent: keyVault
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#b44">&amp;#39;Fishfun&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> properties: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value: secrets&lt;span style="color:#666">.&lt;/span>Fishfun
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="use-a-loop-to-deploy-the-secrets">Use a loop to deploy the secrets&lt;/h2>
&lt;p>If you happen to have a lot of secrets that you want to deploy this way, or if you want to make sure that new secrets can be added without touching the deployment code, you can use a loop to iterate over the properties of the `keyvaultSecrets&amp;rsquo; object.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="">resource&lt;/span> &lt;span style="">secret&lt;/span> &lt;span style="">&amp;#39;Microsoft.KeyVault/vaults/secrets@&lt;/span>&lt;span style="color:#666">2019-09-01&lt;/span>&lt;span style="">&amp;#39;&lt;/span> &lt;span style="">=&lt;/span> [&lt;span style="">for&lt;/span> &lt;span style="">secretItem&lt;/span> &lt;span style="">in&lt;/span> &lt;span style="">items(keyvaultSecrets):&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">parent:&lt;/span> &lt;span style="">keyVault&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">name:&lt;/span> &lt;span style="">secretItem.key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">properties:&lt;/span> &lt;span style="">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">value:&lt;/span> &lt;span style="">secretItem.value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">}&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="protect-your-local-secret-files">Protect your local secret files&lt;/h2>
&lt;p>So far we have managed to keep our secrets out of version control, but they are still laying around in plain text files, which is not what we want for any type of secret.&lt;/p>
&lt;p>One way I like to do this is by encrypting the secrets using the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ugosan.vscode-openpgp">OpenPGP extension&lt;/a> in vscode (&lt;code>ugosan.vscode-openpgp&lt;/code>).&lt;/p>
&lt;p>This allows me to protect the files that contain the secrets using a private key and passphrase.&lt;/p>
&lt;p>&lt;img src="https://manualbashing.github.io/static/secrets-gpg-animation.gif" alt="An animation showing how a encrypted file is decrypted with a passphras">&lt;/p></description></item><item><title>Transform your data with XPath in Logic Apps and Power Automate</title><link>https://manualbashing.github.io/posts/transform-your-data-with-xpath-in-logic-apps-and-power-automate/</link><pubDate>Tue, 14 Mar 2023 14:24:01 +0000</pubDate><guid>https://manualbashing.github.io/posts/transform-your-data-with-xpath-in-logic-apps-and-power-automate/</guid><description>&lt;p>Imagine you are writing a Logic App or a Power Automate flow and you want to transfrom the following data structure:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;#34;books&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;#34;book&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;#34;title&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;Bullshit Jobs: A Theory&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;#34;author&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;David Graeber&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;#34;title&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;Fragments of an Anarchist Anthropology (Paradigm)&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;#34;author&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;David Graeber&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;#34;title&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;In Praise of Idleness&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;#34;author&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;Bertrand Russell&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>into something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;#34;author&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;David Graeber&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;#34;books&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#b44">&amp;#34;Bullshit Jobs: A Theory&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#b44">&amp;#34;Fragments of an Anarchist Anthropology (Paradigm)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;#34;author&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;Bertrand Russell&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;#34;books&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#b44">&amp;#34;In Praise of Idleness&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>What type of transformation is done here? For each author we need to create an array of all the author&amp;rsquo;s books. A straight forward approach would be to use the &lt;a href="https://learn.microsoft.com/en-us/azure/logic-apps/logic-apps-perform-data-operations?tabs=consumption#filter-array-action">filter array action&lt;/a>.&lt;/p>
&lt;p>But there are two problems here:&lt;/p>
&lt;ol>
&lt;li>How do we know which authors exist in the list and how do we deal with authors (like &amp;ldquo;David Graeber&amp;rdquo;) that appears several times in the list?&lt;/li>
&lt;li>Even after filtering the list down to books by &amp;ldquo;David Graeber&amp;rdquo;, how do we manage to merge the resulting book titles into a single array?&lt;/li>
&lt;/ol>
&lt;p>Tasks like this are not uncommon but often quite tricky to solve without using several for-each loops and conditions, which would inflate the workflow unnecessarily and make it hard to read.&lt;/p>
&lt;p>This is where XPath comes into the picture. XPath is a language used to navigate and query XML documents. In simple terms, XML documents are like trees, where each element is a node in the tree. XPath allows you to specify a path through this tree to locate specific nodes or groups of nodes.&lt;/p>
&lt;p>Let&amp;rsquo;s take our example above. Converted to xml, it would look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000;font-weight:bold">&amp;lt;books&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;lt;book&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;lt;title&amp;gt;&lt;/span>Bullshit Jobs: A Theory&lt;span style="color:#008000;font-weight:bold">&amp;lt;/title&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;lt;author&amp;gt;&lt;/span>David Graeber&lt;span style="color:#008000;font-weight:bold">&amp;lt;/author&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;lt;/book&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;lt;book&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;lt;title&amp;gt;&lt;/span>Fragments of an Anarchist Anthropology (Paradigm)&lt;span style="color:#008000;font-weight:bold">&amp;lt;/title&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;lt;author&amp;gt;&lt;/span>David Graeber&lt;span style="color:#008000;font-weight:bold">&amp;lt;/author&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;lt;/book&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;lt;book&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;lt;title&amp;gt;&lt;/span>In Praise of Idleness&lt;span style="color:#008000;font-weight:bold">&amp;lt;/title&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;lt;author&amp;gt;&lt;/span>Bertrand Russell&lt;span style="color:#008000;font-weight:bold">&amp;lt;/author&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;lt;/book&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000;font-weight:bold">&amp;lt;/books&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using XPath, you can select nodes from this document based on their element name, or position in the document. And we can use this to solve the problems, stated above:&lt;/p>
&lt;ul>
&lt;li>&lt;code>//author/text()&lt;/code>: Selects the text value of all &lt;code>author&lt;/code> elements that appear anywhere in the xml document.&lt;/li>
&lt;li>&lt;code>//author[text()=&amp;quot;David Graeber&amp;quot;]/following-sibling::title/text()&lt;/code>: This first selects the &lt;code>author&lt;/code> element that has &lt;code>&amp;quot;David Graeber&amp;quot;&lt;/code> as a text value. From this node it determines the text value of the the &lt;code>title&lt;/code> element, that is its immediate sibling.&lt;/li>
&lt;/ul>
&lt;p>For more examples on XPath queries that can be used in Logic Apps and Power Automate see: &lt;a href="https://learn.microsoft.com/en-us/azure/logic-apps/workflow-definition-language-functions-reference#xpath">xpath() - Reference guide for expression functions - Azure Logic Apps&lt;/a>&lt;/p>
&lt;p>Let&amp;rsquo;s see now, how these two XPath queries help us to transform the data in our example.&lt;/p>
&lt;h2 id="transforming-json-data-to-xml">Transforming JSON data to XML&lt;/h2>
&lt;p>XPath only works on XML documents. In order to use XPath we will need to transform our JSON objects to XML first. This can be done using the &lt;code>xml()&lt;/code> expression function, but there is a caveat:&lt;/p>
&lt;blockquote>
&lt;p>⚠️ XML documents must have a single root element.&lt;/p>
&lt;/blockquote>
&lt;p>This means, that it is not possible to transform &lt;code>{&amp;quot;foo&amp;quot;:[ &amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;]}&lt;/code> into xml, as this would be translated as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000;font-weight:bold">&amp;lt;foo&amp;gt;&lt;/span>A&lt;span style="color:#008000;font-weight:bold">&amp;lt;/foo&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000;font-weight:bold">&amp;lt;foo&amp;gt;&lt;/span>B&lt;span style="color:#008000;font-weight:bold">&amp;lt;/foo&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000;font-weight:bold">&amp;lt;foo&amp;gt;&lt;/span>C&lt;span style="color:#008000;font-weight:bold">&amp;lt;/foo&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Instead we have to provide a single root element to the data structure before attempting the conversion to XML: &lt;code>{&amp;quot;bar&amp;quot;:{&amp;quot;foo&amp;quot;:[ &amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;]}}&lt;/code>. This would translate into valid XML:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000;font-weight:bold">&amp;lt;bar&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;lt;foo&amp;gt;&lt;/span>A&lt;span style="color:#008000;font-weight:bold">&amp;lt;/foo&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;lt;foo&amp;gt;&lt;/span>B&lt;span style="color:#008000;font-weight:bold">&amp;lt;/foo&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;lt;foo&amp;gt;&lt;/span>C&lt;span style="color:#008000;font-weight:bold">&amp;lt;/foo&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000;font-weight:bold">&amp;lt;/bar&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Accordingly in a Logic App we would do it like this:&lt;/p>
&lt;p>&lt;img src="https://manualbashing.github.io/static/transform-xml.png" alt="">&lt;/p>
&lt;p>The actual conversion to XML is then done in a compose action with the following expression:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>xml(outputs(&lt;span style="color:#b44">&amp;#39;Compose_-_provide_root_element_to_books_array_for_xml_transformation&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The output of this last compose action, is what we will be working with, when applying the XPath.&lt;/p>
&lt;h2 id="getting-a-list-of-authors-with-distinct-values">Getting a list of authors with distinct values&lt;/h2>
&lt;p>The following XPath query can be used to get a list of all authors from the XML in our example: &lt;code>//author/text()&lt;/code>. To apply the XPath the expression function &lt;code>xpath()&lt;/code> is used:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>xpath(outputs(&lt;span style="color:#b44">&amp;#39;Compose_-_transform_books_array_to_xml&amp;#39;&lt;/span>), &lt;span style="color:#b44">&amp;#39;//author/text()&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will result in a string array with all author names, but this list does not yet contain distinct values, which means that &amp;ldquo;David Graeber&amp;rdquo; would appear two times. While XPath offers functions that would allow to return distinct values, these functions are unfortunately not supported in Logic Apps and Power Automate.&lt;/p>
&lt;p>Instead we can use the &lt;code>union()&lt;/code> expression function. A trick, that I have explained earlier on this blog: &lt;a href="https://manualbashing.github.io/posts/get-distinct-values-from-array-in-logic-apps-and-power-automate/">Get distinct values from array in Logic Apps and Power Automate (manualbashing.github.io)&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>union(xpath(outputs(&lt;span style="color:#b44">&amp;#39;Compose_-_transform_books_array_to_xml&amp;#39;&lt;/span>), &lt;span style="color:#b44">&amp;#39;//author/text()&amp;#39;&lt;/span>), json(&lt;span style="color:#b44">&amp;#39;[]&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will result in a list of authors. in which each author appears only once.&lt;/p>
&lt;p>&lt;img src="https://manualbashing.github.io/static/distinct-values.png" alt="distinct values">&lt;/p>
&lt;h2 id="get-an-array-of-book-titles-by-author">Get an array of book titles by author&lt;/h2>
&lt;p>Now that we have list of all authors, a single for each loop will be enough to transform the data in the way, that we want.&lt;/p>
&lt;p>First we interate over the list of authors to prepare an XPath query that will return the titles of all books of the current author:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">//&lt;/span>author[text()&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">&amp;#34;@{item()}&amp;#34;&lt;/span>]&lt;span style="color:#666">/&lt;/span>following&lt;span style="color:#666">-&lt;/span>sibling::title&lt;span style="color:#666">/&lt;/span>text()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This first selects the &lt;code>author&lt;/code> element that has the current author&amp;rsquo;s name as a text value. From this node it determines the text value of the the &lt;code>title&lt;/code> element, that is its immediate sibling. The current author&amp;rsquo;s name is returned by the expression &lt;code>item()&lt;/code>, which refers to the current element in the for each loop.&lt;/p>
&lt;p>To execute the XPath query we use another compose step and add the following expression:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>xpath(outputs(&lt;span style="color:#b44">&amp;#39;Compose_-_transform_books_array_to_xml&amp;#39;&lt;/span>), outputs(&lt;span style="color:#b44">&amp;#39;Compose_-_XPath_expression&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The result we can then arrange into a new object and add this to an array variable.&lt;/p>
&lt;p>&lt;img src="https://manualbashing.github.io/static/books-by-author.png" alt="Books by author">&lt;/p>
&lt;p>The result of our efforts looks like this:&lt;/p>
&lt;p>&lt;img src="https://manualbashing.github.io/static/transformation-result.png" alt="transformation result">&lt;/p>
&lt;blockquote>
&lt;p>⌨️ &lt;strong>Example&lt;/strong>&lt;/p>
&lt;p>To see this all in action, you can deploy a minimal example that I have added to my bicep-snippets repository: &lt;a href="https://github.com/manualbashing/bicep-snippets/tree/mother/logicapp-xpath">bicep-snippets/logicapp-msi-workspace at mother · manualbashing/bicep-snippets (github.com)&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>A new preferred way to call listKeys() in bicep</title><link>https://manualbashing.github.io/posts/a-new-preferred-way-to-call-listkeys-in-bicep/</link><pubDate>Fri, 10 Mar 2023 11:45:00 +0100</pubDate><guid>https://manualbashing.github.io/posts/a-new-preferred-way-to-call-listkeys-in-bicep/</guid><description>&lt;p>After upgrading to &lt;code>Bicep CLI version 0.15.31 (3ba6e06a8d)&lt;/code> I got a linter warning in one of my bicep files:&lt;/p>
&lt;blockquote>
&lt;p>Use a resource reference instead of invoking function &amp;ldquo;listKeys&amp;rdquo;. This simplifies the syntax and allows Bicep to better understand your deployment dependency graph.bicep core &lt;a href="https://aka.ms/bicep/linter/use-resource-symbol-reference">https://aka.ms/bicep/linter/use-resource-symbol-reference&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>The offensive line was where I am reading the access key from a log analytics workspace:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="">listKeys(logAnalyticsWorkspace.id,&lt;/span> &lt;span style="">logAnalyticsWorkspace.apiVersion).primarySharedKey&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Unfortunately the URL in the linter message did not resolve to any help page but redirected me to bing instead.&lt;/p>
&lt;p>So I tried my best guess as to what the linter tried to tell me and I got lucky:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="">logAnalyticsWorkspace.listKeys().primarySharedKey&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The linter warning disappeared and my deployment continued to work just fine.&lt;/p>
&lt;p>This syntax is indeed easier to read. I had no idea, that it was possible to use methods on symbolic references.&lt;/p></description></item><item><title>How to export csv watchlists from Azure Sentinel</title><link>https://manualbashing.github.io/posts/how-to-export-csv-watchlists-from-azure-sentinel/</link><pubDate>Thu, 09 Mar 2023 15:30:37 +0200</pubDate><guid>https://manualbashing.github.io/posts/how-to-export-csv-watchlists-from-azure-sentinel/</guid><description>&lt;p>Azure Sentinel is Microsoft&amp;rsquo;s &lt;em>Security Information and Event Management&lt;/em> (SIEM) tool, that helps to identify security threats and to respond quickly when they occur. One could say that it is an organization&amp;rsquo;s enhanced ears and eyes, like.. you know:&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/The_Sentinel_(TV_series)">&lt;img src="https://manualbashing.github.io/static/the-sentinel.png" alt="The Sentinel">&lt;/a>&lt;/p>
&lt;p>Sentinel supports so called watchlists. Watchlists are csv files, that add custom information to the assets that you want to monitor closely.&lt;/p>
&lt;p>Creating and uploading watchlists is a piece of cake and can be done in the Azure Portal: &lt;a href="https://learn.microsoft.com/en-us/azure/sentinel/watchlists-create">Create watchlists - Microsoft Sentinel | Microsoft Learn&lt;/a>.&lt;/p>
&lt;p>But what if you need to download an existing watchlist? This appears to be unreasonably difficult. At the time of this writing there is no download button in the Azure Portal. And the &lt;a href="https://learn.microsoft.com/en-us/cli/azure/service-page/microsoft%20sentinel?view=azure-cli-latest">Azure CLI extention for Sentinel&lt;/a> doesn&amp;rsquo;t offer this option either.&lt;/p>
&lt;p>Fortunately the Azure Management REST API allows us to work around this limitation.&lt;/p>
&lt;h2 id="export-csv-watchlists-using-the-rest-api">Export csv watchlists using the REST API&lt;/h2>
&lt;p>There is an API method, that allows us to list the contents of the Sentinel watchlists in JSON format: &lt;a href="https://learn.microsoft.com/en-us/rest/api/securityinsights/preview/watchlist-items/list?tabs=HTTP">Watchlist Items - List - REST API (Azure Sentinel) | Microsoft Learn&lt;/a>.&lt;/p>
&lt;p>The only thing we need to do is to translate this output into the schema of the CSV files that Sentinel supports. This can be done with the following PowerShell cmdlet.&lt;/p>
&lt;script src="https://gist.github.com/manualbashing/d52f7a74e03a2942628caa45fe3c8f65.js">&lt;/script>
&lt;p>&lt;a href="https://gist.github.com/manualbashing/d52f7a74e03a2942628caa45fe3c8f65">Export-SentinelWatchlist.ps1&lt;/a>&lt;/p>
&lt;p>To run this cmdlet the following requirements need to be met:&lt;/p>
&lt;ul>
&lt;li>It needs to be run in PowerShell Core&lt;/li>
&lt;li>The Az PowerShell module is installed&lt;/li>
&lt;li>You are connected to the correct Azure subscription with the Az PowerShell module (Run &lt;code>Get-AzContext&lt;/code> to check).&lt;/li>
&lt;/ul>
&lt;p>You can run this cmdlet for example like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>. ./&lt;span style="color:#a2f">Export-SentinelWatchlist&lt;/span>.ps1 &lt;span style="color:#080;font-style:italic"># dotsourcing the file that contains the cmdlet&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a2f">Export-SentinelWatchlist&lt;/span> -ResourceGroupName &lt;span style="color:#b44">&amp;#39;rg-sentinel&amp;#39;&lt;/span> -WorkspaceName &lt;span style="color:#b44">&amp;#39;sws-sentinel-workspace&amp;#39;&lt;/span> -WatchlistName &lt;span style="color:#b44">&amp;#39;Customer&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title> Query Azure Log Analytics from Logic App using Managed Identity</title><link>https://manualbashing.github.io/posts/logicapp-loganalytics-mi/</link><pubDate>Fri, 01 Apr 2022 17:15:55 +0200</pubDate><guid>https://manualbashing.github.io/posts/logicapp-loganalytics-mi/</guid><description>&lt;p>While &lt;a href="https://docs.microsoft.com/en-us/azure/azure-monitor/logs/log-analytics-workspace-overview">Azure Log Analytics Workspaces&lt;/a> supports access using a &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview">Managed Identity&lt;/a> (formally known as: Managed Service Identity, MSI), the official &lt;a href="https://docs.microsoft.com/en-us/azure/azure-monitor/logs/logicapp-flow-connector">Logic Apps connector for Azure Log Analytics (Azure Monitor Logs)&lt;/a> does not.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Edit 2023-12-04&lt;/strong>: The Logic App connctor for Azure Log Analytics supports managed identities now. So the following workaround is no longer needed.&lt;/p>
&lt;/blockquote>
&lt;p>As a workaround queries to a Log Analytics Workspace can also be send directly to the &lt;a href="https://docs.microsoft.com/en-us/rest/api/loganalytics/">Azure REST API&lt;/a>, as the built-in HTTP connector in Logic Apps supports Managed Identities.&lt;/p>
&lt;p>&lt;img src="https://manualbashing.github.io/static/logicapp-workspace-msi.png" alt="">&lt;/p>
&lt;blockquote>
&lt;p>⌨️ &lt;strong>Example&lt;/strong>&lt;/p>
&lt;p>I have added a minimal example to my bicep-snippets repository: &lt;a href="https://github.com/manualbashing/bicep-snippets/tree/mother/logicapp-msi-workspace">bicep-snippets/logicapp-msi-workspace at mother · manualbashing/bicep-snippets (github.com)&lt;/a>&lt;/p>
&lt;/blockquote></description></item></channel></rss>