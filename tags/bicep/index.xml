<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bicep on ManualBashing</title><link>https://manualbashing.github.io/tags/bicep/</link><description>Recent content in Bicep on ManualBashing</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 17 Nov 2023 13:37:45 +0000</lastBuildDate><atom:link href="https://manualbashing.github.io/tags/bicep/index.xml" rel="self" type="application/rss+xml"/><item><title>Keep your secrets out of your bicep parameters</title><link>https://manualbashing.github.io/posts/keep-your-secrets-out-of-your-bicep-parameters/</link><pubDate>Fri, 17 Nov 2023 13:37:45 +0000</pubDate><guid>https://manualbashing.github.io/posts/keep-your-secrets-out-of-your-bicep-parameters/</guid><description>&lt;p>Imagine the following scenario: We have to deploy an Azure Key Vault that comes already populated with a secret, let&amp;rsquo;s say, some third party&amp;rsquo;s API access key. Our bicep file (&lt;code>azuredeploy.bicep&lt;/code>) could look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>param location string &lt;span style="color:#666">=&lt;/span> resourceGroup()&lt;span style="color:#666">.&lt;/span>location
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>param tenantId string &lt;span style="color:#666">=&lt;/span> tenant()&lt;span style="color:#666">.&lt;/span>tenantId
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a2f">@secure&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>param keyvaultSecretCatfunValue string
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var name &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#b44">&amp;#39;kv-${uniqueString(resourceGroup().id)}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>resource keyVault &lt;span style="color:#b44">&amp;#39;Microsoft.KeyVault/vaults@2019-09-01&amp;#39;&lt;/span> &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> location: location
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> properties: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tenantId: tenantId
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sku: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#b44">&amp;#39;standard&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> family: &lt;span style="color:#b44">&amp;#39;A&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> accessPolicies: []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>resource keyvaultSecretCatfun &lt;span style="color:#b44">&amp;#39;Microsoft.KeyVault/vaults/secrets@2019-09-01&amp;#39;&lt;/span> &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parent: keyVault
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#b44">&amp;#39;Catfun&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> properties: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value: keyvaultSecretCatfunValue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But how to we deploy this to Azure without entering the secret&amp;rsquo;s value every time we call &lt;code>az deployment&lt;/code>?&lt;/p>
&lt;h2 id="loading-individual-secrets-from-external-files">Loading individual secrets from external files&lt;/h2>
&lt;p>One trick that worked well for me so far, was to use an external text file, that would be excluded from version control.&lt;/p>
&lt;p>For this to work would create a file &lt;code>Catfun.secret&lt;/code> that contains the API secret and make sure, that it is excluded from version control via &lt;code>.gitignore&lt;/code>.&lt;/p>
&lt;p>This secret would then be loaded by the bicep template as the default value for the &lt;code>keyvaultSecretCatfunValue&lt;/code> parameter:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a2f">@secure&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">#disable-next-line secure-parameter-default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>param keyvaultSecretCatfunValue string &lt;span style="color:#666">=&lt;/span> loadTextContent(&lt;span style="color:#b44">&amp;#39;Catfun.secret&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(We have to add &lt;code>#disable-next-line secure-parameter-default&lt;/code>) to ignore the warning, that secure parameters should not use default values. Our scenario is a reasonable exception to this rule.)&lt;/p>
&lt;p>&lt;img alt="Screenshot of vscode showing a gitignore file and the code from the code listing above" src="https://manualbashing.github.io/static/vscode-secrets-file.png">&lt;/p>
&lt;h2 id="loading-several-secrets-from-the-same-file">Loading several secrets from the same file&lt;/h2>
&lt;p>If you need to deploy several secrets in a secure way it is not necessary to create a secret file for each. Instead you can save your secrets in a json file, that can be parsed by bicep.&lt;/p>
&lt;p>The content of my &lt;code>MoreSecrets.json&lt;/code> file looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;#34;Catfun&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;MySuperSecretAPIKey!&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000;font-weight:bold">&amp;#34;Fishfun&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;TheSameButBetter##!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The file can then be parsed using the &lt;code>loadJsonContent()&lt;/code> function in bicep:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>param location string &lt;span style="color:#666">=&lt;/span> resourceGroup()&lt;span style="color:#666">.&lt;/span>location
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>param tenantId string &lt;span style="color:#666">=&lt;/span> tenant()&lt;span style="color:#666">.&lt;/span>tenantId
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a2f">@secure&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-style:italic">#disable-next-line secure-parameter-default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>param secrets &lt;span style="color:#a2f">object&lt;/span> &lt;span style="color:#666">=&lt;/span> loadJsonContent(&lt;span style="color:#b44">&amp;#39;MoreFun.secret&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var name &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#b44">&amp;#39;kv-${uniqueString(resourceGroup().id)}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>resource keyVault &lt;span style="color:#b44">&amp;#39;Microsoft.KeyVault/vaults@2019-09-01&amp;#39;&lt;/span> &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> location: location
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> properties: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tenantId: tenantId
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sku: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#b44">&amp;#39;standard&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> family: &lt;span style="color:#b44">&amp;#39;A&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> accessPolicies: []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>resource keyvaultSecretCatfun &lt;span style="color:#b44">&amp;#39;Microsoft.KeyVault/vaults/secrets@2019-09-01&amp;#39;&lt;/span> &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parent: keyVault
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#b44">&amp;#39;Catfun&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> properties: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value: secrets&lt;span style="color:#666">.&lt;/span>Catfun
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>resource keyvaultSecretFishfun &lt;span style="color:#b44">&amp;#39;Microsoft.KeyVault/vaults/secrets@2019-09-01&amp;#39;&lt;/span> &lt;span style="color:#666">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parent: keyVault
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#b44">&amp;#39;Fishfun&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> properties: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value: secrets&lt;span style="color:#666">.&lt;/span>Fishfun
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="use-a-loop-to-deploy-the-secrets">Use a loop to deploy the secrets&lt;/h2>
&lt;p>If you happen to have a lot of secrets that you want to deploy this way, or if you want to make sure that new secrets can be added without touching the deployment code, you can use a loop to iterate over the properties of the `keyvaultSecrets&amp;rsquo; object.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="">resource&lt;/span> &lt;span style="">secret&lt;/span> &lt;span style="">&amp;#39;Microsoft.KeyVault/vaults/secrets@&lt;/span>&lt;span style="color:#666">2019-09-01&lt;/span>&lt;span style="">&amp;#39;&lt;/span> &lt;span style="">=&lt;/span> [&lt;span style="">for&lt;/span> &lt;span style="">secretItem&lt;/span> &lt;span style="">in&lt;/span> &lt;span style="">items(keyvaultSecrets):&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">parent:&lt;/span> &lt;span style="">keyVault&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">name:&lt;/span> &lt;span style="">secretItem.key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">properties:&lt;/span> &lt;span style="">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">value:&lt;/span> &lt;span style="">secretItem.value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">}&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="protect-your-local-secret-files">Protect your local secret files&lt;/h2>
&lt;p>So far we have managed to keep our secrets out of version control, but they are still laying around in plain text files, which is not what we want for any type of secret.&lt;/p>
&lt;p>One way I like to do this is by encrypting the secrets using the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ugosan.vscode-openpgp">OpenPGP extension&lt;/a> in vscode (&lt;code>ugosan.vscode-openpgp&lt;/code>).&lt;/p>
&lt;p>This allows me to protect the files that contain the secrets using a private key and passphrase.&lt;/p>
&lt;p>&lt;img alt="An animation showing how a encrypted file is decrypted with a passphras" src="https://manualbashing.github.io/static/secrets-gpg-animation.gif">&lt;/p></description></item><item><title>A new preferred way to call listKeys() in bicep</title><link>https://manualbashing.github.io/posts/a-new-preferred-way-to-call-listkeys-in-bicep/</link><pubDate>Fri, 10 Mar 2023 11:45:00 +0100</pubDate><guid>https://manualbashing.github.io/posts/a-new-preferred-way-to-call-listkeys-in-bicep/</guid><description>&lt;p>After upgrading to &lt;code>Bicep CLI version 0.15.31 (3ba6e06a8d)&lt;/code> I got a linter warning in one of my bicep files:&lt;/p>
&lt;blockquote>
&lt;p>Use a resource reference instead of invoking function &amp;ldquo;listKeys&amp;rdquo;. This simplifies the syntax and allows Bicep to better understand your deployment dependency graph.bicep core &lt;a href="https://aka.ms/bicep/linter/use-resource-symbol-reference">https://aka.ms/bicep/linter/use-resource-symbol-reference&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>The offensive line was where I am reading the access key from a log analytics workspace:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="">listKeys(logAnalyticsWorkspace.id,&lt;/span> &lt;span style="">logAnalyticsWorkspace.apiVersion).primarySharedKey&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Unfortunately the URL in the linter message did not resolve to any help page but redirected me to bing instead.&lt;/p>
&lt;p>So I tried my best guess as to what the linter tried to tell me and I got lucky:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="">logAnalyticsWorkspace.listKeys().primarySharedKey&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The linter warning disappeared and my deployment continued to work just fine.&lt;/p>
&lt;p>This syntax is indeed easier to read. I had no idea, that it was possible to use methods on symbolic references.&lt;/p></description></item><item><title> Query Azure Log Analytics from Logic App using Managed Identity</title><link>https://manualbashing.github.io/posts/logicapp-loganalytics-mi/</link><pubDate>Fri, 01 Apr 2022 17:15:55 +0200</pubDate><guid>https://manualbashing.github.io/posts/logicapp-loganalytics-mi/</guid><description>&lt;p>While &lt;a href="https://docs.microsoft.com/en-us/azure/azure-monitor/logs/log-analytics-workspace-overview">Azure Log Analytics Workspaces&lt;/a> supports access using a &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview">Managed Identity&lt;/a> (formally known as: Managed Service Identity, MSI), the official &lt;a href="https://docs.microsoft.com/en-us/azure/azure-monitor/logs/logicapp-flow-connector">Logic Apps connector for Azure Log Analytics (Azure Monitor Logs)&lt;/a> does not.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Edit 2023-12-04&lt;/strong>: The Logic App connctor for Azure Log Analytics supports managed identities now. So the following workaround is no longer needed.&lt;/p>
&lt;/blockquote>
&lt;p>As a workaround queries to a Log Analytics Workspace can also be send directly to the &lt;a href="https://docs.microsoft.com/en-us/rest/api/loganalytics/">Azure REST API&lt;/a>, as the built-in HTTP connector in Logic Apps supports Managed Identities.&lt;/p>
&lt;p>&lt;img src="https://manualbashing.github.io/static/logicapp-workspace-msi.png">&lt;/p>
&lt;blockquote>
&lt;p>⌨️ &lt;strong>Example&lt;/strong>&lt;/p>
&lt;p>I have added a minimal example to my bicep-snippets repository: &lt;a href="https://github.com/manualbashing/bicep-snippets/tree/mother/logicapp-msi-workspace">bicep-snippets/logicapp-msi-workspace at mother · manualbashing/bicep-snippets (github.com)&lt;/a>&lt;/p>
&lt;/blockquote></description></item></channel></rss>